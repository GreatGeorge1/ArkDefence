// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.Data;

namespace WebApplication1.Migrations.NextApp
{
    [DbContext(typeof(NextAppContext))]
    [Migration("20191102152036_terminals")]
    partial class terminals
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Core.Domain.SbcController", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("ClientIdHash")
                        .HasColumnType("text");

                    b.Property<string>("ClientSecretHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Mac")
                        .HasColumnType("text");

                    b.Property<long?>("SiteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VersionIndexId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("VersionIndexId");

                    b.ToTable("Controllers");
                });

            modelBuilder.Entity("Microsoft.EntityFrameworkCore.AutoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Changed")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("RowId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.ToTable("AutoHistory");
                });

            modelBuilder.Entity("WebApplication1.Data.App.Hardware", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("VendorId")
                        .HasColumnType("text");

                    b.Property<long?>("VersionIndexId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VersionIndexId");

                    b.ToTable("Hardwares");
                });

            modelBuilder.Entity("WebApplication1.Data.App.HardwareVersionIndex", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HardwareVersionIndices");

                    b.HasDiscriminator<string>("Discriminator").HasValue("HardwareVersionIndex");
                });

            modelBuilder.Entity("WebApplication1.Data.App.Terminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<long?>("ControllerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("GpioPort")
                        .HasColumnType("integer");

                    b.Property<string>("Port")
                        .HasColumnType("text");

                    b.Property<string>("Uuid")
                        .HasColumnType("text");

                    b.Property<long?>("VersionIndexId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ControllerId");

                    b.HasIndex("VersionIndexId");

                    b.ToTable("Terminals");
                });

            modelBuilder.Entity("WebApplication1.Data.App.TerminalConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("ConfigId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("TerminalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("TerminalId", "ConfigId")
                        .IsUnique();

                    b.ToTable("TerminalConfigs");
                });

            modelBuilder.Entity("WebApplication1.Data.App.TerminalConfigTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<int>("BleDistance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("FingerTimeout")
                        .HasColumnType("integer");

                    b.Property<long?>("HardwareIndexId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasBle")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasCard")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasFinger")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsBleEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCardEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFingerEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("Mode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HardwareIndexId");

                    b.ToTable("TerminalConfigTemplates");
                });

            modelBuilder.Entity("WebApplication1.Data.Site", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DeletionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("WebApplication1.Data.App.ControllerVersionIndex", b =>
                {
                    b.HasBaseType("WebApplication1.Data.App.HardwareVersionIndex");

                    b.HasDiscriminator().HasValue("ControllerVersionIndex");
                });

            modelBuilder.Entity("WebApplication1.Data.App.TerminalVersionIndex", b =>
                {
                    b.HasBaseType("WebApplication1.Data.App.HardwareVersionIndex");

                    b.HasDiscriminator().HasValue("TerminalVersionIndex");
                });

            modelBuilder.Entity("Core.Domain.SbcController", b =>
                {
                    b.HasOne("WebApplication1.Data.Site", "Site")
                        .WithMany("Controllers")
                        .HasForeignKey("SiteId");

                    b.HasOne("WebApplication1.Data.App.ControllerVersionIndex", "VersionIndex")
                        .WithMany("Controllers")
                        .HasForeignKey("VersionIndexId");
                });

            modelBuilder.Entity("WebApplication1.Data.App.Hardware", b =>
                {
                    b.HasOne("WebApplication1.Data.App.HardwareVersionIndex", "VersionIndex")
                        .WithMany("Hardwares")
                        .HasForeignKey("VersionIndexId");
                });

            modelBuilder.Entity("WebApplication1.Data.App.Terminal", b =>
                {
                    b.HasOne("Core.Domain.SbcController", "Controller")
                        .WithMany("Terminals")
                        .HasForeignKey("ControllerId");

                    b.HasOne("WebApplication1.Data.App.TerminalVersionIndex", "VersionIndex")
                        .WithMany("Terminals")
                        .HasForeignKey("VersionIndexId");
                });

            modelBuilder.Entity("WebApplication1.Data.App.TerminalConfig", b =>
                {
                    b.HasOne("WebApplication1.Data.App.TerminalConfigTemplate", "TerminalConfigTemplate")
                        .WithMany("TerminalConfigs")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.App.Terminal", "Terminal")
                        .WithMany("TerminalConfigs")
                        .HasForeignKey("TerminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Data.App.TerminalConfigTemplate", b =>
                {
                    b.HasOne("WebApplication1.Data.App.TerminalVersionIndex", "HardwareIndex")
                        .WithMany("ConfigTemplates")
                        .HasForeignKey("HardwareIndexId");
                });
#pragma warning restore 612, 618
        }
    }
}
